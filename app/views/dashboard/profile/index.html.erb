<!DOCTYPE html>
<html lang="en">
<!--
Result: <div id="result"></div>

<strong>时间范围：</strong><div id="output-time-range-val"></div> <div id="output-time-range"></div>
<strong>行为：</strong><div id="output-behaviour"></div>
<strong>种类：</strong><div id="output-category"></div>
Map Type: <div id="map-type"></div>
-->

<style>
  .pull-right {
      padding: 10px;
  }
</style>
<div class='container'>

    <div class="pull-right">
        <button class="btn btn-success" id="fetch-data-btn">获取数据</button>
        <button class="btn btn-info" id='output-data-btn'>导出图表</button>
        <button class="btn btn-info" id='export-records-btn'>导出日志表(utf-8)</button>
        <button class='btn btn-info' onclick="chooseCSVLocation()">导出后端日志</button>
    </div>

    <div>
        <table class="table table-striped">
            <tr>

                <th>目标种类</th>
              <th>目标用户</th>
              <th>时间值</th>
              <th>时间单位</th>
              <th>时间粒度（选择'无'时生成饼图）</th>
              <th>行为</th>

            </tr>
            <tr>
                <td>
                    <select id="category" oninput="displayUserInput()">
                        <option value=''>全部一级类别</option>
                        <% Category.all.each do |category| %>
                            <% if category.ancestry == nil%>
                                <optgroup label="<%= category.title %>"></optgroup>
                                <option value="<%= category.id%>"><%=category.title%></option>
                            <% end %>
                            <% category.children.each do |sub_category| %>
                                <option value="<%= sub_category.id %>" <%#= @product.category_id == sub_category.id ? 'selected' : '' %>><%= sub_category.title %></option>
                            <% end -%>
                        <% end -%>
                    </select>
                </td>

                <td><input type='text' style='width: 400px;' id='username' placeholder="请输入用户名，为空则默认针对所有用户" oninput="displayUserInput()"></td>

                <td><input type="number" min="1" id="time_range_val" placeholder="默认值为1" oninput="displayUserInput()"></td>

                <td>
                    <select id="time-range" oninput="displayUserInput()">
                        <option value='day'>
                        <div class ='option'>
                            <div id="time_range" value='day'></div>
                            天
                        </div>
                        </option>
                        <option value='week'>
                        <div class ='option'>
                            <div id="time_range" value='week'></div>
                            星期
                        </div>
                        </option>
                        <option value='month'>
                        <div class ='option'>
                            <div id="time_range" value='month'></div>
                            月
                        </div>
                        </option>
                        <option value='year'>
                        <div class ='option'>
                            <div id="time_range" value='year'></div>
                            年
                        </div>
                        </option>
                    </select>
                </td>

                <td>
                    <select id="time-gran" oninput="displayUserInput()">
                        <option value=''>
                        <div class = 'option'>
                            无
                        </div>
                        </option>
                        <option value='hour'>
                        <div class ='option'>
                            小时
                        </div>
                        </option>
                        <option value='day'>
                        <div class ='option'>
                            日
                        </div>
                        </option>
                        <option value='week'>
                        <div class ='option'>
                            周
                        </div>
                        </option>
                        <option value='month'>
                        <div class ='option'>
                            月
                        </div>
                        </option>
                    </select>
                </td>

                <td>
                    <select id="behaviour" oninput="displayUserInput()">
                        <option value='1'>
                        <div class ='option'>
                            购买量
                        </div>
                        </option>
                        <option value='5'>
                        <div class ='option'>
                            消费额
                        </div>
                        </option>
                        <option value='2'>
                        <div class ='option'>
                            退货量
                        </div>
                        </option>
                        <option value='3'>
                        <div class ='option'>
                            浏览量
                        </div>
                        </option>
                        <option value='4'>
                        <div class ='option'>
                            收藏量
                        </div>
                        </option>
                    </select>
                </td>
            </tr>
        </table>
    </div>
</div>

<div id='table-container'></div>

<!--
<div class="form-group">
    <div class="col-sm-5">
        <select id="time-range" oninput="displayUserInput()">
            <option value='year'>
            <div class ='option'>
                <div id="time_range" value='year'></div>
                年
            </div>
            </option>
            <option value='month'>
            <div class ='option'>
                <div id="time_range" value='month'></div>
                月
            </div>
            </option>
            <option value='week'>
            <div class ='option'>
                <div id="time_range" value='week'></div>
                星期
            </div>
            </option>
            <option value='day'>
            <div class ='option'>
                <div id="time_range" value='day'></div>
                天
            </div>
            </option>
        </select>
    </div>
</div>
-->

<!--
时间粒度
<div class="form-group">
    <div class="col-sm-5">
        <select id="time-gran" oninput="displayUserInput()">
            <option value=''>
            <div class = 'option'>
                无
            </div>
            </option>
            <option value='hour'>
            <div class ='option'>
                小时
            </div>
            </option>
            <option value='day'>
            <div class ='option'>
                日
            </div>
            </option>
            <option value='week'>
            <div class ='option'>
                周
            </div>
            </option>
            <option value='month'>
            <div class ='option'>
                月
            </div>
            </option>
        </select>
    </div>
</div>
-->
<!--
<div class="form-group">
    <div class="col-sm-5">
        <select id="behaviour" oninput="displayUserInput()">
            <option value='1'>
            <div class ='option'>
                购买量
            </div>
            </option>
            <option value='5'>
            <div class ='option'>
                消费额
            </div>
            </option>
            <option value='2'>
            <div class ='option'>
                退货量
            </div>
            </option>
            <option value='3'>
            <div class ='option'>
                浏览量
            </div>
            </option>
            <option value='4'>
            <div class ='option'>
                收藏量
            </div>
            </option>
        </select>
    </div>
</div>
-->
<div>
  <% stat_products = []%>
  <% stat_categories = []%>
  <% Product.all.each do |product| %>
    <% stat_products << product %>
  <% end %>
  <% Category.all.each do |category|%>
    <% stat_categories << category %>
  <% end %>
  <% stat_products = stat_products.to_json%>
  <% stat_categories = stat_categories.to_json%>
  <%#= stat_products %>
  <div id="stat-products" data-stat-products="<%= stat_products %>"></div>
  <div id="stat-categories" data-stat-categories="<%= stat_categories %>"></div>
</div>

<div id="chart" style="width: 1200px; height: 400px;"></div>

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document01</title>
    <style>
        .box{
            width: 300px;
            height: 300px;
            background-color: rgb(188, 227, 236);
        }
        .body {
            overflow-y: auto; /* 允许垂直滚动 */
        }
    </style>
    <%= javascript_include_tag 'jquery' %>
    <%= javascript_include_tag 'echarts.min' %>
    <%= javascript_include_tag 'FileSaver' %>
</head>
<body>
<!--<div class="box"></div>-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.3.2/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.debug.js"></script>
<script>
  //全局变量
  var records = [];
  var time_range;//时间范围
  var time_range_val;//时间数量
  var time_gran;//时间粒度
  var select_customer;//被统计对象
  var select_product;
  var select_category;
  var behaviour;//被统计值
  var current_user;//当前用户
  var username;
  var category;

  var myChart;

  function displayUserInput() {
    var time_range_val = document.getElementById('time_range_val').value;
    var time_range = document.getElementById('time-range').value;
    var behaviour = document.getElementById('behaviour').value;
    var category = document.getElementById('category').value;
    /*
    var output_time_range_val = document.getElementById('output-time-range-val');
    var output_time_range = document.getElementById('output-time-range');
    var output_behaviour = document.getElementById('output-behaviour');
    var output_category = document.getElementById('output-category');

    output_time_range.textContent = time_range;
    output_time_range_val.textContent = time_range_val;
    output_behaviour.textContent = behaviour;
    output_category.textContent = category;*/
  }
  document.getElementById('fetch-data-btn').addEventListener('click', function() {
          //document.getElementById('result').textContent = 'received'

          category = document.getElementById('category').value;
          time_range_val = document.getElementById('time_range_val').value;
          if (time_range_val == '') {
            time_range_val = '1';
          }
          time_range = document.getElementById('time-range').value;
          time_gran = document.getElementById('time-gran').value;
          behaviour = document.getElementById('behaviour').value;
          username = document.getElementById('username').value;
          var xhr = new XMLHttpRequest();
          //var producttype = document.getElementById('input-producttype');
          var url = '/dashboard/profile/get_records';
          url += '?time_range=' + time_range + '&time_range_val=' + time_range_val;
          url += '&behaviour=' + (parseInt(behaviour) == 5 ? 1 : parseInt(behaviour));
          if (username != '') {
            url += '&user_name=' + username;
          }
          if (category != '') {
            url += '&category_id=' + category;
          }
          xhr.open('GET', url, true); // 发送 GET 请求到 /products 路径
          xhr.setRequestHeader("Content-type", "application/json");
          xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
              if (xhr.status === 200) {
                //document.getElementById('data-container').innerHTML = xhr.responseText; // 将返回的数据显示在页面上
                //var response = JSON.parse(xhr.responseText);
                var response = $.parseJSON(xhr.responseText);
                //document.getElementById('result').textContent = response;
                
                records.length=0;
                for (var i = 0; i < response.length; i++) {
                  records.push(response[i]);
                }
                //document.getElementById('result').textContent = records.length;
                genGraph();
                //genRecordsTable();
              } else {
                //console.error('请求失败');
                //document.getElementById('result').textContent = xhr.responseText;
              }
            }
          };
          xhr.send();
        });

        document.getElementById('output-data-btn').addEventListener('click', function() {
            //导出图表为pdf文件
            //document.getElementById('result').textContent = '试图导出图表';
            /*
            let blob = new Blob(['保存一个文本'],{type: 'text/plain;charset=utf-8'});
            document.getElementById('result').textContent = '测试文件创建';
            document.getElementById('result').textContent = FileSaver.toString();
            console.log(FileSaver);
            saveAs(blob, 'a.docx');
            document.getElementById('result').textContent = '导出完成';
            */
            // 将图表容器转换为 Canvas 对象
            html2canvas(document.getElementById('chart')).then(function(canvas) {
                // 创建 PDF 对象
                var pdf = new jsPDF();

                // 获取 Canvas 对象的数据 URL
                var canvasDataURL = canvas.toDataURL('image/jpeg', 1);

                // 设置 PDF 的尺寸和偏移量
                var fileWidth = pdf.internal.pageSize.getWidth();
                var fileHeight = pdf.internal.pageSize.getHeight();
                var _width = canvas.width / fileWidth;
                var _height = canvas.height / fileHeight;
                var zoom = _width < _height ? _height : _width;

                var pdfWidth = canvas.width / zoom;
                var pdfHeight = canvas.height / zoom;
                var offsetX = (pdf.internal.pageSize.getWidth() - pdfWidth) / 2;
                var offsetY = (pdf.internal.pageSize.getHeight() - pdfHeight) / 2;

                // 将图像插入到 PDF 中
                pdf.addImage(canvasDataURL, 'JPEG', offsetX, offsetY, pdfWidth, pdfHeight);

                // 保存 PDF 文件
                pdf.save('chart.pdf');
            });
        });

        document.getElementById('export-records-btn').addEventListener('click', function() {
            //document.getElementById('result').textContent = '试图导出日志表';
            // 创建CSV文件内容
            var csvContent = 'data:text/csv;charset=utf-8,';

            // 添加表头行
            /*
            tableHTML += '<tr>';
            tableHTML += '<th>用户id</th>';
            tableHTML += '<th>产品id</th>';
            tableHTML += '<th>产品单价</th>';
            tableHTML += '<th>行为</th>';
            tableHTML += '<th>数量</th>';
            tableHTML += '<th>时间</th>';
            */
            //csvContent += 'Column 1,Column 2\n';
            csvContent += '用户id';
            csvContent += ',产品id';
            csvContent += ',产品单价';
            //csvContent += ',行为';
            csvContent += ',数量';
            csvContent += ',时间\n';

            // 添加数据行
            for (var i = 0; i < records.length; i++) {
                //csvContent += records[i].column1 + ',' + records[i].column2 + '\n';
                // 添加其他列的数据
                var record = records[i];

                var user_id = record.user_id;
                var product_id = record.product_id;
                var product_price = record.money;
                //var user_behaviour = parseBehaviour(record.behaviour);
                var amount = record.amount;
                var time = rubytime2jstime(record.created_at);

                csvContent += user_id + ',' + 
                            product_id + ',' + 
                            product_price + ',' + 
                            //user_behaviour + ',' + 
                            amount + ',' + 
                            time + '\n';
            }

            // 创建一个隐藏的下载链接并设置下载属性
            var encodedUri = encodeURI(csvContent);
            var link = document.createElement('a');
            link.setAttribute('href', encodedUri);
            link.setAttribute('download', encodeBehaviour(behaviour) + '-records.csv');

            // 模拟点击下载链接
            link.click();
        });

        function encodeBehaviour(code) {
            code = (parseInt(code) == 5 ? 1 : parseInt(code))
            if (code == 1) {
                return "buy";
            }
            else if (code == 2) {
                return "refund";
            }
            else if (code == 3) {
                return "browse";
            }
            else if (code == 4) {
                return "collect";
            }
            return "";
        }
        
        function parseBehaviour(code) {
            if (code == 1) {
                return "销售量";
            }
            else if (code == 2) {
                return "退货量";
            }
            else if (code == 3) {
                return "浏览量";
            }
            else if (code == 4) {
                return "收藏量";
            }
            else if (code == 5) {
                return "销售额/"
            }
            return "";
        }
        function parseAmount(record) {
            if (parseInt(behaviour) == 5) {
                return parseInt(record.amount) * parseInt(record.money);
            }
            return parseInt(record.amount);
        }
        function id2category(product_id) {
            //document.getElementById('result').textContent = 'search category ' + product_id;
            var products = document.getElementById('stat-products').dataset.statProducts;
            //products = JSON.parse(products);
            products = $.parseJSON(products);
            var foundProduct = products.find(product => product.id === product_id);
            //document.getElementById('result').textContent = 'found ' + foundProduct.id;

            var categories = document.getElementById('stat-categories').dataset.statCategories;
            categories = $.parseJSON(categories);
            var foundCategory = categories.find(category => category.id === foundProduct.category_id);
            //document.getElementById('result').textContent = 'found category ' + foundCategory.id;
            return foundCategory;
        }
        function id2product(product_id) {
            //document.getElementById('result').textContent = 'search category ' + product_id;
            var products = document.getElementById('stat-products').dataset.statProducts;
            //products = JSON.parse(products);
            products = $.parseJSON(products);
            var foundProduct = products.find(product => product.id === product_id);
            //document.getElementById('result').textContent = 'found ' + foundProduct.id;

            return foundProduct;
        }
        function getCategoryAnc(category_id) {
            var categories = document.getElementById('stat-categories').dataset.statCategories;
            categories = $.parseJSON(categories);
            var foundCategory = categories.find(category => category.id === category_id);
            var anc = categories.find(category => category.id === parseInt(foundCategory.ancestry));
            return anc;
        }
        function timegran2ms(val, type) {
            if (type == 'day') {
                return val * 24 * 3600 * 1000;
            }
            else if (type == 'week') {
                return val * 7 * 24 * 3600 * 1000;
            }
            else if (type == 'hour') {
                return val * 3600 * 1000;
            }
            else if (type == 'month') {
                return val = 30 * 24 * 3600 * 1000;
            }
            return 0;
        }
        function rubytime2jstime(ruby_time) {
            return new Date(ruby_time);
        }
        function time2seriesname(time, time_gran) {
            var ret = time.getFullYear() + '';
            if (time_gran == 'year') {
                return ret;
            }
            ret += '/' + (time.getMonth() + 1);
            if (time_gran == 'month') {
                return ret;
            }
            ret += '/' + time.getDate();
            if (time_gran == 'week' || time_gran == 'day') {
                return ret;
            }
            ret += '-' + time.getHours() + ':00';
            return ret;
        }
        function time2oritime(time, time_gran) {
            //设置oritime，把当前时间根据时间粒度对齐

            var date = new Date(time);
            if (time_gran == 'hour') {
                date.setHours(date.getHours(), 0, 0, 0);
            }
            else if (time_gran == 'day') {
                date.setHours(0, 0, 0, 0);
            }
            else if (time_gran == 'week') {
                var t = date.getDate() - date.getDay();
                date.setDate(t);
                date.setHours(0, 0, 0, 0);
            }
            else if (time_gran == 'month') {
                date.setDate(1);
                date.setHours(0, 0, 0, 0);
            }
            return date;
        }
        function reduceGran(time, time_gran) {
            var date = new Date(time);
            if (time_gran == 'hour') {
                date.setHours(date.getHours() - 1, 0, 0, 0);
            }
            else if (time_gran == 'day') {
                date.setDate(date.getDate() - 1);
            }
            else if (time_gran == 'week') {
                date.setDate(date.getDate() - 7);
            }
            else if (time_gran == 'month') {
                date.setMonth(date.getMonth() - 1);
            }
            return date;
        }
        //封装生成日志表的函数
        function genRecordsTable() {
            //document.getElementById('result').textContent = '开始生成日志表';
            //使用records数组适当解码后生成表格
            // 创建表格的 HTML
            var tableHTML = '<table class="table table-striped">';
            // 添加表头行
            tableHTML += '<tr>';
            tableHTML += '<th>用户id</th>';
            tableHTML += '<th>产品id</th>';
            tableHTML += '<th>产品单价</th>';
            //tableHTML += '<th>行为</th>';
            tableHTML += '<th>数量</th>';
            tableHTML += '<th>时间</th>';
            // 添加其他列的表头
            tableHTML += '</tr>';
            
            for (var i = 0; i < records.length; i++) {
                var record = records[i];

                var user_id = record.user_id;
                var product_id = record.product_id;
                var product_price = record.money;
                //var user_behaviour = parseBehaviour(record.behaviour);
                var amount = record.amount;
                var time = rubytime2jstime(record.created_at);

                tableHTML += '<tr>';
                tableHTML += '<td>' + user_id + '</td>';
                tableHTML += '<td>' + product_id + '</td>';
                tableHTML += '<td>' + product_price + '</td>';
                //tableHTML += '<td>' + user_behaviour + '</td>';
                tableHTML += '<td>' + amount + '</td>';
                tableHTML += '<td>' + time + '</td>';
                tableHTML += '</tr>';
            }
            tableHTML += '</table>';

            //document.getElementById('result').textContent = '日志表创建完成';

            // 将生成的表格插入到表格容器中
            $('#table-container').html(tableHTML);
        }
        //封装生成统计图的函数
        function genGraph() {
            //3.初始化实例对象 echarts.init(dom容器)
            //var myChart = echarts.init(document.querySelector(".box"));
            //var myChart = echarts.init(document.getElementById('chart'));

            //records
            var map_type = time_gran == '' ? 'pie' : 'bar';
            //var output_map_type = document.getElementById('map-type');
            //output_map_type.textContent = map_type;
            var stat_name = parseBehaviour(behaviour);
            //document.getElementById('result').textContent = stat_name;
            var series_data = [];
            var series_name = [];
            var series = new Map();
            var pie_data = [];
            
            //document.getElementById('result').textContent = 'gen map';
            if (map_type == 'pie') {
                //将所有种类的特定行为的数据量求和
                //document.getElementById('result').textContent = 'gen pie map';
                //document.getElementById('result').textContent = records[0].product_id;
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    var category_name;
                    if (category == '') {
                        //查找的是全部分类
                        category_name = getCategoryAnc(id2category(record.product_id).id).title;
                    }
                    else {
                        if (parseInt(id2category(record.product_id).id) != parseInt(category)) {
                            //分类名与record产品所属分类不符，此时一定查找的是一级分类
                            category_name = id2category(record.product_id).title;
                        }
                        else {
                            //查找的是二级分类
                            category_name = id2product(record.product_id).title;
                        }
                    }
                    
                    if (!series.has(category_name)) {
                        series.set(category_name, parseAmount(record));
                    }
                    else {
                        var ori_amount = series.get(category_name);
                        ori_amount += parseAmount(record);
                        series.set(category_name, ori_amount);
                    }
                }

                //将map中的数据顺序导出
                series_name.length = 0;
                series_data.length = 0;
                series.forEach((value, key) => {
                    series_name.push(key);
                    series_data.push(value);
                    pie_data.push({name: key, value: value});
                });
                //document.getElementById('result').textContent = series_data;
                /*document.getElementById('result').textContent = 'series_name: ' + series_name + '\n' + 
                'series_data: ' + series_data;*/
            }
            else {
                //document.getElementById('result').textContent = 'gen bar map';
                var oritime = time2oritime(new Date(), time_gran);
                //document.getElementById('result').textContent = oritime;

                output = [];
                for (var i = records.length - 1; i >= 0; i--) {
                    var record = records[i];
                    //document.getElementById('result').textContent = record;
                    //document.getElementById('result').textContent = 'record created at: ' + record.created_at;
                    var record_time = new Date(rubytime2jstime(record.created_at));
                    output.push(record_time);
                    /*document.getElementById('result').textContent = 'record time:' + record_time + 
                      'oritime: ' + oritime;*/
                    if (record_time < oritime) {
                        while (record_time < oritime) {
                          oritime = reduceGran(oritime, time_gran);
                          //series.set(oritime, 0);
                        }
                        /*document.getElementById('result').textContent = 'create new time ' + oritime + 
                        'amount: ' + parseInt(record.amount) + 'created_at: ' + record_time;*/
                        series.set(oritime, parseAmount(record));
                    }
                    else {
                        if (!series.has(oritime)) {
                          series.set(oritime, 0);
                        }
                        var ori_amount = series.get(oritime);
                        series.set(oritime, (parseInt(ori_amount) + parseAmount(record)));
                    }
                }
                series_name.length = 0;
                series_data.length = 0;
                series.forEach((value, key) => {
                    series_name.push(time2seriesname(key, time_gran));
                    series_data.push(value);
                });
                series_name.reverse();
                series_data.reverse();
                /*document.getElementById('result').textContent = 'series_name: ' + series_name + '\n' + 
                'series_data: ' + series_data;*/
                //document.getElementById('result').textContent = output;
            }
            //4.指定配置项和数据
            /*
                time_gran不为空：折线图/柱状图
                select_*的组合
                product和category可以单独出现
                customer与product和category之一结合 表示customer <behaviour> product/category

                product/category单独出现，表示它们被所有用户的 <behaviour>

                time_gran为空：饼状图
                customer有无确定对数据的全局筛选
                time-range也为对数据的全局筛选
                category为空，默认若干category
                category指令，统计同categroy中不同product的behaviour的占比
            */

            var option;
            if (map_type == 'pie') {
                myChart = echarts.init(document.getElementById('chart'));
                myChart.clear();
                //document.getElementById('result').textContent = 'output pie graph';
                option = {
                    title: {
                        text: stat_name + '分布'
                    },
                    series: [{
                        //name: '销量',
                        name: behaviour,
                        //type: 'bar',
                        type: map_type,
                        //data: [5, 20, 36, 10, 10, 20]//横坐标各个数据名称的数据值
                        data: pie_data,
                        label: {
                            show: true,
                            formatter: function (arg) {
                                return arg.name + ": " + arg.value + "\n" + arg.percent + "%";
                            }
                        }
                    }]
                };
            }
            else {
                if (parseInt(behaviour) != 5) {
                    map_type = 'line';
                }
                myChart = echarts.init(document.getElementById('chart'));
                myChart.clear();
                option = {
                    title: {
                        text: stat_name + '变化'
                    },
                    tooltip: {},
                    legend: {
                        //data:[stat_value]
                    },
                    xAxis: {
                        //data: ["衬衫","羊毛衫","雪纺衫","裤子","高跟鞋","袜子"]//横坐标各个数据名称
                        data: series_name
                    },
                    yAxis: {},
                    series: [{
                        //name: '销量',
                        name: parseBehaviour(behaviour),
                        //type: 'bar',
                        type: map_type,
                        //data: [5, 20, 36, 10, 10, 20]//横坐标各个数据名称的数据值
                        data: series_data,
                        label: {
                            show: true,
                            position: 'top'
                        },
                        barWidth: '30%'
                    }]
                };
            }
            //5.将配置项设置给echarts实例对象，使用刚指定的配置项和数据显示图表。
            myChart.setOption(option);
        }

        //保存后端日志
        function chooseCSVLocation() {
            /*
            console.log('enter chooseCSVLocation');
            const csvFileInput = document.getElementById('csvFileInput');
            console.log('get csvFileInput');
            csvFileInput.click();

            csvFileInput.addEventListener('change', function(event) {
                console.log('开始请求');
                var selectedFile = event.target.files[0]; // 获取选择的目录路径
                if (selectedFile) {
                    console.log('Selected file:', selectedFile); // 在控制台输出选择的文件路径 // 在控制台输出选择的文件路径
                    selectedPath = URL.createObjectURL(selectedFile);
                    console.log('Selected file URL:', selectedPath);
                    // 在这里可以将选择的路径发送到后端进行处理
                    // 例如，可以使用 AJAX 请求将路径发送给后端并触发 CSV 导出操作
                    var xhr = new XMLHttpRequest();
                    //var producttype = document.getElementById('input-producttype');
                    var url = '/dashboard/profile/export_log';
                    url += '?log_path=' + selectedPath;
                    xhr.open('POST', url, true); // 发送 POST 请求到 /products 路径
                    xhr.setRequestHeader("Content-type", "application/json");
                    //xhr.setRequestHeader('X-CSRF-Token', csrfToken);
                    xhr.onreadystatechange = function() {
                        if (xhr.readyState === XMLHttpRequest.DONE) {
                            if (xhr.status === 200) {
                                console.log('调用成功');
                            } else {
                                console.log('调用失败')
                            }
                        }
                    };
                    xhr.send();
                }
            });
            */
                    const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
                    var xhr = new XMLHttpRequest();
                    //var producttype = document.getElementById('input-producttype');
                    var url = '/dashboard/profile/export_log';
                    //url += '?log_path=' + selectedPath;
                    xhr.open('POST', url, true); // 发送 POST 请求到 /products 路径
                    xhr.setRequestHeader("Content-type", "application/json");
                    xhr.setRequestHeader('X-CSRF-Token', csrfToken);
                    xhr.onreadystatechange = function() {
                        if (xhr.readyState === XMLHttpRequest.DONE) {
                            if (xhr.status === 200) {
                                console.log('调用成功');
                            } else {
                                console.log('调用失败')
                            }
                        }
                    };
                    xhr.send();
        }
</script>
</body>


</html>