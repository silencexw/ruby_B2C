<h1>修改个人信息</h1>
<div class="row">
  <div class="container">
    <%= form_tag dashboard_update_message_path, method: :put, class: 'form-horizontal', id: "user_form" do %>
      <% unless current_user.errors.blank? %>
        <div class="alert alert-danger">
          <ul>
            <% current_user.errors.messages.values.flatten.each do |error| %>
              <li><%= error %></li>
            <% end -%>
          </ul>
        </div>
      <% end %>
      <div class="form-group">
        <div class="col-lg-12">用户名 *</div>
        <div class="col-lg-12">
          <%= text_field_tag :username, current_user.username, class: "form-control" %>
        </div>
      </div>

      <div class="form-group">
        <div class="col-lg-12">旧密码 *</div>
        <div class="col-lg-12">
          <%= password_field_tag :old_password, '', class: "form-control" %>
        </div>
      </div>
      <div class="form-group">
        <div class="col-lg-12">密码 *</div>
        <div class="col-lg-12">
          <%= password_field_tag :user_password, '', class: "form-control" %>
        </div>
      </div>
      <div class="form-group">
        <div class="col-lg-12">密码确认 *</div>
        <div class="col-lg-12">
          <%= password_field_tag :password_confirmation, '', class: "form-control" %>
        </div>
      </div>
      <div class="form-group">
        <div class="col-lg-12">
          <input type="submit" name="create_user_submit" value="保存" class="col-xs-12 btn btn-primary">
        </div>
      </div>
    <% end -%>

  </div>
</div>

<button id="fetch-data-btn">获取数据</button>
Result: <div id="result"></div>

<strong>时间范围：</strong><div id="output-time-range-val"></div> <div id="output-time-range"></div>
<strong>行为：</strong><div id="output-behaviour"></div>

Map Type: <div id="map-type"></div>

过去<input type="text" id="time_range_val" placeholder="请输入文本" oninput="displayUserInput()">
<div class="form-group">
    <div class="col-sm-5">
        <select id="time-range" oninput="displayUserInput()">
            <option value='year'>
            <div class ='option'>
                <div id="time_range" value='year'></div>
                年
            </div>
            </option>
            <option value='month'>
            <div class ='option'>
                <div id="time_range" value='month'></div>
                月
            </div>
            </option>
            <option value='week'>
            <div class ='option'>
                <div id="time_range" value='week'></div>
                星期
            </div>
            </option>
            <option value='day'>
            <div class ='option'>
                <div id="time_range" value='day'></div>
                天
            </div>
            </option>
        </select>
    </div>
</div>

时间粒度<input type="text" id="time-gran" placeholder="请输入文本" oninput="displayUserInput()">

<div class="form-group">
    <div class="col-sm-5">
        <select id="behaviour" oninput="displayUserInput()">
            <option value='1'>
            <div class ='option'>
                购买量
            </div>
            </option>
            <option value='1'>
            <div class ='option'>
                消费额
            </div>
            </option>
            <option value='2'>
            <div class ='option'>
                退货量
            </div>
            </option>
            <option value='3'>
            <div class ='option'>
                浏览量
            </div>
            </option>
            <option value='4'>
            <div class ='option'>
                收藏量
            </div>
            </option>
        </select>
    </div>
</div>

Products<%= @products = Product.all %>

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document01</title>
    <style>
        .box{
            width: 300px;
            height: 300px;
            background-color: rgb(188, 227, 236);
        }
    </style>
</head>
<body>
<script>
  //全局变量
  var records = [];
  var time_range;//时间范围
  var time_range_val;//时间数量
  var time_gran;//时间粒度
  var select_customer;//被统计对象
  var select_product;
  var select_category;
  var behaviour;//被统计值
  var current_user;//当前用户


  function displayUserInput() {
    var time_range_val = document.getElementById('time_range_val').value;
    var time_range = document.getElementById('time-range').value;
    var behaviour = document.getElementById('behaviour').value;

    var output_time_range_val = document.getElementById('output-time-range-val');
    var output_time_range = document.getElementById('output-time-range');
    var output_behaviour = document.getElementById('output-behaviour');

    output_time_range.textContent = time_range;
    output_time_range_val.textContent = time_range_val;
    output_behaviour.textContent = behaviour;
  }
  document.getElementById('fetch-data-btn').addEventListener('click', function() {
          document.getElementById('result').textContent = 'received'

          time_range_val = document.getElementById('time_range_val').value;
          time_range = document.getElementById('time-range').value;
          time_gran = document.getElementById('time-gran').value;
          behaviour = document.getElementById('behaviour').value;
          var xhr = new XMLHttpRequest();
          //var producttype = document.getElementById('input-producttype');
          var url = '/dashboard/profile/get_records';
          url += '?time_range=' + time_range + '&time_range_val=' + time_range_val;
          url += '&behaviour=' + behaviour;
          xhr.open('GET', url, true); // 发送 GET 请求到 /products 路径
          xhr.setRequestHeader("Content-type", "application/json");
          xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
              if (xhr.status === 200) {
                //document.getElementById('data-container').innerHTML = xhr.responseText; // 将返回的数据显示在页面上
                //var response = JSON.parse(xhr.responseText);
                var response = $.parseJSON(xhr.responseText);
                //document.getElementById('result').textContent = response;
                
                records.length=0;
                for (var i = 0; i < response.length; i++) {
                  records.push(response[i]);
                }
                document.getElementById('result').textContent = records.length;
                genGraph();
              } else {
                //console.error('请求失败');
                document.getElementById('result').textContent = 'failed';
              }
            }
          };
          xhr.send();
        });
        
        function parseBehavior(code) {
            if (code == 1) {
                return "buy";
            }
            else if (code == 2) {
                return "refund";
            }
            else if (code == 3) {
                return "view";
            }
            else if (code == 4) {
                return "favor";
            }
            return "";
        }
        function id2category(product_id) {
            document.getElementById('result').textContent = 'search category ' + product_id;
            var products = document.getElementById('@products')
            //var foundProduct = products.find(product => product.product_id === product_id);
            document.getElementById('result').textContent = products.value;
            var categories = JSON.parse(document.getElementById('@categories'));
            var foundCategory = categories.find(category => category.category_id === product.category_id);
            return foundCategory;
        }
        function timegran2ms(val, type) {
            if (type == 'day') {
                return val * 24 * 3600 * 1000;
            }
            else if (type == 'week') {
                return val * 7 * 24 * 3600 * 1000;
            }
            else if (type == 'hour') {
                return val * 3600 * 1000;
            }
        }
        //封装生成统计图的函数
        function genGraph() {
            //3.初始化实例对象 echarts.init(dom容器)
            //var myChart = echarts.init(document.querySelector(".box"));

            //records
            var map_type = time_gran == '' ? 'pie' : 'bar';
            var output_map_type = document.getElementById('map-type');
            output_map_type.textContent = map_type;
            var stat_name = parseBehavior(behaviour);
            document.getElementById('result').textContent = stat_name;
            var series_data = [];
            var series_name = [];
            var series = new Map();
            
            document.getElementById('result').textContent = 'gen map';
            if (map_type == 'pie') {
                //将所有种类的特定行为的数据量求和
                document.getElementById('result').textContent = 'gen pie map';
                //document.getElementById('result').textContent = records[0].product_id;
                for (var i = 0; i < 1; i++) {
                    var record = records[i];
                    var category_name = id2category(record.product_id).title;
                    /*
                    if (!series.has(category_name)) {
                        series.set(category_name, record.amount);
                    }
                    else {
                        var ori_amount = series.get(category_name);
                        ori_amount += record.amount;
                        series.set(category_name, ori_amount);
                    }*/
                }

                //将map中的数据顺序导出
                series.forEach((value, key) => {
                    series_name.push(key);
                    series_data.push(value);
                });
            }
            /*
            else {
                var oritime = currentDate.getTime();
                oritime = new Date(oritime - gran);
                var gran = timegran2ms(JSON.parse(time_gran).value);

                for (var i = 0; i < records.length; i++) {
                    var record = record[i];
                    var record_time = new Date(rubytime2jstime(record.created_at));
                    if (record_time < oritime) {
                        oritime = new Date(oritime - gran);
                        series.set(oritime, record.amount);
                    }
                    else {
                        var ori_amount = series.get(oritime);
                        series.set(oritime, ori_amount + record.amount);
                    }
                }

                series.forEach((value, key) => {
                    series_name.push(key);
                    series_data.push(value);
                });
            }*/
            //4.指定配置项和数据
            /*
                time_gran不为空：折线图/柱状图
                select_*的组合
                product和category可以单独出现
                customer与product和category之一结合 表示customer <behaviour> product/category

                product/category单独出现，表示它们被所有用户的 <behaviour>

                time_gran为空：饼状图
                customer有无确定对数据的全局筛选
                time-range也为对数据的全局筛选
                category为空，默认若干category
                category指令，统计同categroy中不同product的behaviour的占比
            */
            /*
            var option = {
                title: {
                    text: 'ECharts 入门示例'
                },
                tooltip: {},
                legend: {
                    data:[stat_value]
                },
                xAxis: {
                    data: ["衬衫","羊毛衫","雪纺衫","裤子","高跟鞋","袜子"]//横坐标各个数据名称
                },
                yAxis: {},
                series: [{
                    //name: '销量',
                    name: series_name,
                    type: map_type,
                    //data: [5, 20, 36, 10, 10, 20]//横坐标各个数据名称的数据值
                    data: series_data
                }]
            };
            //5.将配置项设置给echarts实例对象，使用刚指定的配置项和数据显示图表。
            myChart.setOption(option);*/
        }
</script>
</body>